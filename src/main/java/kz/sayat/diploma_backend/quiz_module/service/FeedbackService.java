package kz.sayat.diploma_backend.quiz_module.service;

import kz.sayat.diploma_backend.quiz_module.models.*;
import kz.sayat.diploma_backend.quiz_module.repository.FeedbackRepository;
import kz.sayat.diploma_backend.quiz_module.repository.QuizAttemptRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import java.util.NoSuchElementException;

@Service
@RequiredArgsConstructor
public class FeedbackService {

    private final FeedbackRepository feedbackRepository;
    private final QuizAttemptRepository quizAttemptRepository;
    private final GeminiService geminiService;



    public String generateFeedback(int attemptId) {
        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)
            .orElseThrow(() -> new NoSuchElementException("Quiz attempt not found for ID: " + attemptId));

        String promptText = buildPrompt(quizAttempt);
        String feedbackText=geminiService.getFeedback(promptText);

        feedbackRepository.save(new Feedback(promptText, feedbackText, quizAttempt));
        return feedbackText;
    }
    private String buildPrompt(QuizAttempt quizAttempt) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢–µ—Å—Ç ”ô—Ä–µ–∫–µ—Ç—ñ–Ω—ñ“£ “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã:\n");
        prompt.append("–°—Ç—É–¥–µ–Ω—Ç: ").append(quizAttempt.getStudent().getFirstname()).append("\n");
        prompt.append("–¢–µ—Å—Ç —Ç–∞“õ—ã—Ä—ã–±—ã: ").append(quizAttempt.getQuiz().getTitle()).append("\n");
        prompt.append("”ò—Ä–µ–∫–µ—Ç –Ω”©–º—ñ—Ä—ñ: ").append(quizAttempt.getAttemptNumber()).append("\n");
        prompt.append("“∞–ø–∞–π: ").append(quizAttempt.getScore()).append("/100\n\n");

        prompt.append("–ñ–∞—É–∞–ø—Ç–∞—Ä:\n");
        for (QuizAttemptAnswer attemptAnswer : quizAttempt.getAttemptAnswers()) {
            Question question = attemptAnswer.getQuestion();

            String correctAnswerText = question.getAnswers().stream()
                .filter(Answer::isCorrect) // 'isCorrect' - –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –µ–∫–µ–Ω—ñ–Ω –∞–Ω—ã“õ—Ç–∞–π—Ç—ã–Ω ”©—Ä—ñ—Å
                .map(Answer::getAnswerText)
                .findFirst()
                .orElse("–î“±—Ä—ã—Å –∂–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã");

            prompt.append("- –°“±—Ä–∞“õ: ").append(question.getQuestionText()).append("\n");
            prompt.append("  –°—ñ–∑–¥—ñ“£ –∂–∞—É–∞–±—ã“£—ã–∑: ").append(attemptAnswer.getAnswer().getAnswerText()).append("\n");
            prompt.append("  –î“±—Ä—ã—Å –∂–∞—É–∞–ø: ").append(correctAnswerText).append("\n");
            prompt.append("  –ù”ô—Ç–∏–∂–µ: ").append(attemptAnswer.isCorrect() ? "‚úÖ –î“±—Ä—ã—Å" : "‚ùå “ö–∞—Ç–µ").append("\n\n");

            prompt.append("  üßê –ë“±–ª —Å“±—Ä–∞“õ –±–æ–π—ã–Ω—à–∞ –µ–≥–∂–µ–π-—Ç–µ–≥–∂–µ–π–ª—ñ —Ç–∞–ª–¥–∞—É –∂–∞—Å–∞“£—ã–∑. –ï–≥–µ—Ä —Å—Ç—É–¥–µ–Ω—Ç—Ç—ñ“£ –∂–∞—É–∞–±—ã “õ–∞—Ç–µ –±–æ–ª—Å–∞, “õ–∞—Ç–µ–Ω—ñ“£ —Å–µ–±–µ–±—ñ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä—ñ“£—ñ–∑ –∂”ô–Ω–µ –æ–Ω—ã “õ–∞–ª–∞–π –±–æ–ª–¥—ã—Ä–º–∞—É –∫–µ—Ä–µ–∫—Ç—ñ–≥—ñ–Ω –∞–π—Ç—ã“£—ã–∑. –ï–≥–µ—Ä –∂–∞—É–∞–ø –¥“±—Ä—ã—Å –±–æ–ª—Å–∞, “õ—ã—Å“õ–∞—à–∞ –º–∞“õ—Ç–∞—É –Ω–µ–º–µ—Å–µ “õ–æ—Å—ã–º—à–∞ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç–µ–º–µ –±–µ—Ä—ñ“£—ñ–∑.\n\n");

        }

        prompt.append("–û—Å—ã —Ç–µ—Å—Ç ”ô—Ä–µ–∫–µ—Ç—ñ –±–æ–π—ã–Ω—à–∞ –µ–≥–∂–µ–π-—Ç–µ–≥–∂–µ–π–ª—ñ “õ–∞–∑–∞“õ—à–∞ –∫–µ—Ä—ñ –±–∞–π–ª–∞–Ω—ã—Å –±–µ—Ä—ñ“£—ñ–∑. –°—Ç—É–¥–µ–Ω—Ç—Ç—ñ“£ –∫“Ø—à—Ç—ñ –∂–∞“õ—Ç–∞—Ä—ã–Ω, –∂–∏—ñ –∫–µ–∑–¥–µ—Å–µ—Ç—ñ–Ω “õ–∞—Ç–µ–ª–µ—Ä–¥—ñ –∂”ô–Ω–µ –∂–∞“õ—Å–∞—Ä—Ç—É –∂–æ–ª–¥–∞—Ä—ã–Ω –∞—Ç–∞–ø –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑.");

        return prompt.toString();
    }

}
