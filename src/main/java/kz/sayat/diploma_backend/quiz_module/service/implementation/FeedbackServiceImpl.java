package kz.sayat.diploma_backend.quiz_module.service.implementation;

import jakarta.transaction.Transactional;
import kz.sayat.diploma_backend.auth_module.models.Student;
import kz.sayat.diploma_backend.auth_module.service.StudentService;
import kz.sayat.diploma_backend.quiz_module.dto.FeedbackDto;
import kz.sayat.diploma_backend.quiz_module.repository.AttemptAnswerRepository;
import kz.sayat.diploma_backend.quiz_module.service.FeedbackService;
import kz.sayat.diploma_backend.util.exceptions.ResourceNotFoundException;
import kz.sayat.diploma_backend.quiz_module.dto.GeminiRequest;
import kz.sayat.diploma_backend.quiz_module.dto.GeminiResponse;
import kz.sayat.diploma_backend.quiz_module.models.*;
import kz.sayat.diploma_backend.quiz_module.repository.FeedbackRepository;
import kz.sayat.diploma_backend.quiz_module.repository.QuizAttemptRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;

@Service
@Transactional
@RequiredArgsConstructor
public class FeedbackServiceImpl implements FeedbackService {

    private final FeedbackRepository feedbackRepository;
    private final QuizAttemptRepository quizAttemptRepository;
    private final StudentService studentService;
    @Value("${gemini.api-key}")
    private String apiKey;
    @Value("${gemini.api-url}")
    private String apiUrl;


    @Override
    public String generateFeedback(int attemptId) {
        QuizAttempt quizAttempt = quizAttemptRepository.findById(attemptId)
            .orElseThrow(() -> new ResourceNotFoundException("quiz attempt not found"));

        String promptText = buildPrompt(quizAttempt);
        String feedbackText = getFeedback(promptText);

        feedbackRepository.save(new Feedback(promptText, feedbackText, quizAttempt));
        return feedbackText;
    }

    @Override
    public String getFeedbackOfStudent(int attemptId, Authentication authentication) {
        Student student = studentService.getStudentFromUser(authentication);

        QuizAttempt attempt = quizAttemptRepository.findById(attemptId)
            .orElseThrow(() -> new ResourceNotFoundException("Quiz attempt not found"));


        if (attempt.getStudent().getId() != student.getId()) {
            throw new ResourceNotFoundException("You are not allowed to view this feedback");
        }

        Feedback feedback = feedbackRepository.findByQuizAttempt(attempt)
            .orElseThrow(() -> new ResourceNotFoundException("Feedback not found for this attempt"));

        return feedback.getFeedbackText();
    }

    @Override
    public List<FeedbackDto> getAllFeedback() {
        List<Feedback> feedbacks = feedbackRepository.findAll();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        return feedbacks.stream()
            .map(feedback -> {
                String studentFirstname = feedback.getQuizAttempt().getStudent().getFirstname();
                String studentLastname = feedback.getQuizAttempt().getStudent().getLastname();
                String courseTitle = feedback.getQuizAttempt().getQuiz().getModule().getCourse().getTitle();
                String quizTitle = feedback.getQuizAttempt().getQuiz().getTitle();
                String attemptTime = feedback.getCreatedAt().format(formatter);



                return new FeedbackDto(
                    feedback.getId(),
                    feedback.getFeedbackText(),
                    studentFirstname,
                    studentLastname,
                    courseTitle,
                    quizTitle,
                    attemptTime
                );
            })
            .collect(Collectors.toList());
    }

    @Override
    public void deleteFeedback(int id) {
        feedbackRepository.deleteById(id);
    }

    private String buildPrompt(QuizAttempt quizAttempt) {
        StringBuilder prompt = new StringBuilder();
        prompt.append("–¢–µ—Å—Ç ”ô—Ä–µ–∫–µ—Ç—ñ–Ω—ñ“£ “õ–æ—Ä—ã—Ç—ã–Ω–¥—ã—Å—ã:\n");
        prompt.append("–°—Ç—É–¥–µ–Ω—Ç: ").append(quizAttempt.getStudent().getFirstname()).append("\n");
        prompt.append("–¢–µ—Å—Ç —Ç–∞“õ—ã—Ä—ã–±—ã: ").append(quizAttempt.getQuiz().getTitle()).append("\n");
        prompt.append("”ò—Ä–µ–∫–µ—Ç –Ω”©–º—ñ—Ä—ñ: ").append(quizAttempt.getAttemptNumber()).append("\n");
        prompt.append("“∞–ø–∞–π: ").append(quizAttempt.getScore()).append("/100\n\n");

        prompt.append("–ñ–∞—É–∞–ø—Ç–∞—Ä:\n");

        for (QuizAttemptAnswer attemptAnswer : quizAttempt.getAttemptAnswers()) {
            Question question = attemptAnswer.getQuestion();

            String correctAnswerText = question.getAnswers().stream()
                .filter(Answer::isCorrect)
                .map(Answer::getAnswerText)
                .findFirst()
                .orElse("–î“±—Ä—ã—Å –∂–∞—É–∞–ø —Ç–∞–±—ã–ª–º–∞–¥—ã");

            prompt.append("- –°“±—Ä–∞“õ: ").append(question.getQuestionText()).append("\n");
            prompt.append("  –°—Ç—É–¥–µ–Ω—Ç—Ç—ñ“£ –∂–∞—É–∞–±—ã: ").append(attemptAnswer.getAnswer().getAnswerText()).append("\n");
            prompt.append("  –î“±—Ä—ã—Å –∂–∞—É–∞–ø: ").append(correctAnswerText).append("\n");
            prompt.append("  –ù”ô—Ç–∏–∂–µ: ").append(attemptAnswer.isCorrect() ? "‚úÖ –î“±—Ä—ã—Å" : "‚ùå “ö–∞—Ç–µ").append("\n\n");

            prompt.append("  üßê –¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ:\n");

            if (!attemptAnswer.isCorrect()) {
                prompt.append("  ‚ùå –°—Ç—É–¥–µ–Ω—Ç –±“±–ª —Å“±—Ä–∞“õ“õ–∞ “õ–∞—Ç–µ –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ. “ö–∞—Ç–µ–Ω—ñ“£ —Å–µ–±–µ–±—ñ–Ω –∞–Ω—ã“õ—Ç–∞–ø, –µ–≥–∂–µ–π-—Ç–µ–≥–∂–µ–π–ª—ñ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ –∂–∞—Å–∞. –ù–µ–≥–µ –±“±–ª –∂–∞—É–∞–ø –¥“±—Ä—ã—Å –µ–º–µ—Å? “ö–∞–Ω–¥–∞–π “õ–∞—Ç–µ –æ–π–ª–∞—É —Ç”ô—Å—ñ–ª—ñ –Ω–µ–º–µ—Å–µ —Ç“Ø—Å—ñ–Ω–±–µ—É—à—ñ–ª—ñ–∫ –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω?\n\n");
                prompt.append("  ‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç—ã“£ –º”ô–Ω—ñ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä. –ù–µ–≥–µ –±“±–ª –∂–∞—É–∞–ø –¥“±—Ä—ã—Å? “ö–∞–Ω–¥–∞–π —Ñ–∞–∫—Ç—ñ–ª–µ—Ä, –ª–æ–≥–∏–∫–∞ –Ω–µ–º–µ—Å–µ —Ç–µ–æ—Ä–∏—è–ª—ã“õ –Ω–µ–≥—ñ–∑–¥–µ—Ä –±“±–ª –∂–∞—É–∞–ø—Ç—ã —Ä–∞—Å—Ç–∞–π–¥—ã?\n\n");
            } else {
                prompt.append("  ‚úÖ –°—Ç—É–¥–µ–Ω—Ç –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–¥—ñ. –ë—ñ—Ä–∞“õ “õ–æ—Å—ã–º—à–∞ –ø–∞–π–¥–∞–ª—ã –∞“õ–ø–∞—Ä–∞—Ç –±–µ—Ä. –ë“±–ª —Å“±—Ä–∞“õ“õ–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã –±–∞—Å“õ–∞ “õ–∞–Ω–¥–∞–π –º–∞“£—ã–∑–¥—ã –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä –±–∞—Ä? –ú—ã—Å–∞–ª—ã, —Ç–∞—Ä–∏—Ö–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º—É–ª–∞, –µ—Ä–µ–∂–µ–ª–µ—Ä –Ω–µ–º–µ—Å–µ –Ω–∞“õ—Ç—ã “õ–æ–ª–¥–∞–Ω—É –º—ã—Å–∞–ª–¥–∞—Ä—ã.\n\n");
            }
        }

        prompt.append("üìå –°–æ“£—ã–Ω–¥–∞, —Å—Ç—É–¥–µ–Ω—Ç “õ–∞–π —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä–¥—ã “õ–∞–π—Ç–∞ “õ–∞—Ä–∞—É—ã –∫–µ—Ä–µ–∫ –µ–∫–µ–Ω—ñ–Ω –∞—Ç–∞–ø ”©—Ç. “ö–∞–Ω–¥–∞–π –±—ñ–ª—ñ–º –æ–ª“õ—ã–ª—ã“õ—Ç–∞—Ä—ã –±–∞–π“õ–∞–ª–∞–¥—ã?\n");
        prompt.append("üìå –¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –Ω–∞“õ—Ç—ã ”ô—Ä—ñ –º–∞–∑–º“±–Ω–¥—ã –µ—Ç—ñ–ø –∂–∞—Å–∞. “ö—ã—Å“õ–∞ –∂–∞—É–∞–ø—Ç–∞—Ä–¥–∞–Ω –∞—É–ª–∞“õ –±–æ–ª.\n");

        return prompt.toString();
    }



    private String getFeedback(String quizResult) {
        RestTemplate restTemplate = new RestTemplate();
        String API_URL = apiUrl + apiKey;

        GeminiRequest request = new GeminiRequest(quizResult);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        HttpEntity<GeminiRequest> entity = new HttpEntity<>(request, headers);
        ResponseEntity<GeminiResponse> response = restTemplate.exchange(API_URL, HttpMethod.POST, entity, GeminiResponse.class);

        if (response.getBody() != null && response.getBody().getCandidates() != null) {
            List<GeminiResponse.Candidate> candidates = response.getBody().getCandidates();

            if (!candidates.isEmpty() && candidates.get(0).getContent() != null) {
                List<GeminiResponse.Part> parts = candidates.get(0).getContent().getParts();
                if (!parts.isEmpty()) {
                    return parts.get(0).getText();
                }
            }
        }

        return "No feedback available.";
    }



}
